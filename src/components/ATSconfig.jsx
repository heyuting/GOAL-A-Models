import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, GeoJSON, useMap, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import Modal from '@/components/ui/modal';
import { motion } from "framer-motion";
import { useAuth } from '@/contexts/AuthContext';
import userService from '@/services/userService';
import 'leaflet/dist/leaflet.css';

// Component to handle map zooming to GeoJSON bounds
function MapController({ geoJsonData }) {
  const map = useMap();

  useEffect(() => {
    if (geoJsonData) {
      const bounds = L.geoJSON(geoJsonData).getBounds();
      map.fitBounds(bounds, { padding: [50, 50] });
    }
  }, [geoJsonData, map]);

  return null;
}

// Component to handle map clicks for watershed delineation
function MapClickHandler({ onMapClick }) {
  useMapEvents({
    click: (e) => {
      onMapClick(e.latlng);
    },
  });

  return null;
}

export default function ATSConfig({ savedData }) {
  const { user } = useAuth();
  // Initialize form data state with default values, including layers
  /* const [layers, setLayers] = useState([
    {
      name: 'Layer 1',
      soilType: 'Sandy Loam',
      porosity: '0.45',
      permeability: '1e-12',
      saturation: '0.1',
      vanGenuchtenAlpha: '0.08',
      vanGenuchtenN: '1.6',
    },
  ]); */
  const [simulationName, setSimulationName] = useState('')
  const [simulationStartYear, setSimulationStartYear] = useState(''); 
  const [simulationEndYear, setSimulationEndYear] = useState('');
  const [modisLAIFile, setMODISLAIFile] = useState();
  //const [showLayerModal, setShowLayerModal] = useState(false);
  const [geoJsonData, setGeoJsonData] = useState(null);
  const [geoJsonFileName, setGeoJsonFileName] = useState(null);
  const [minPorosity, setMinPorosity] = useState();
  const [maxPermeability, setMaxPermeability] = useState();
  const [includeRivers, setIncludeRivers] = useState(true);
  const [useGeologicalLayer, setUseGeologicalLayer] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState('');
  const [watershedData, setWatershedData] = useState(null);
  const [streamData, setStreamData] = useState(null);
  const [clickedLocation, setClickedLocation] = useState(null);
  const [isLoadingWatershed, setIsLoadingWatershed] = useState(false);
  const [selectedHucLevel, setSelectedHucLevel] = useState('12');
  const [isSimulationNameAutoGenerated, setIsSimulationNameAutoGenerated] = useState(false);
  
  // HUC level mapping for UI references
  const hucLevelMap = {
    '12': { layer: 6, name: 'HUC12 (Subwatershed)', fields: 'HUC12,NAME,AREASQKM,STATES' },
    '10': { layer: 5, name: 'HUC10 (Watershed)', fields: 'HUC10,NAME,AREASQKM,STATES' },
    '8': { layer: 4, name: 'HUC8 (Subbasin)', fields: 'HUC8,NAME,AREASQKM,STATES' }
  };

  // Load saved data when component mounts or savedData changes
  useEffect(() => {
    if (savedData) {
      const params = savedData.parameters || {};
      setSimulationName(params.simulationName || '');
      setSimulationStartYear(params.simulationStartYear || '');
      setSimulationEndYear(params.simulationEndYear || '');
      setMinPorosity(params.minPorosity || '');
      setMaxPermeability(params.maxPermeability || '');
      setIncludeRivers(params.includeRivers !== undefined ? params.includeRivers : true);
      setUseGeologicalLayer(params.useGeologicalLayer !== undefined ? params.useGeologicalLayer : true);
      // Saved simulation names are considered intentional, not auto-generated
      setIsSimulationNameAutoGenerated(false);
      
      // Load saved files info
      if (savedData.geoJsonFileName) {
        setGeoJsonFileName(savedData.geoJsonFileName);
      }
      if (savedData.modisLAIFileName) {
        setMODISLAIFile({ name: savedData.modisLAIFileName });
      }
    }
  }, [savedData]);

  const handleGeoJsonUpload = async (file) => {
    setGeoJsonFileName(file.name);
    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target.result;
      try {
        const geojson = JSON.parse(content);
        setGeoJsonData(geojson);
        console.log(geojson);
      } catch {
        alert("Invalid GeoJSON file.");
        setGeoJsonFileName(null);
        setGeoJsonData(null);
      }
    };
    reader.readAsText(file);
  };

    // Function to fetch watershed data using current USGS ArcGIS REST services
  const fetchWatershedData = async (lat, lng) => {
    setIsLoadingWatershed(true);
    console.log('Fetching watershed data for:', lat, lng);
    
    try {
      // Use current USGS ArcGIS REST services (no CORS proxy needed)
      // Determine which layers to try based on user selection
      let wbdLayers = [];
      if (selectedHucLevel && hucLevelMap[selectedHucLevel]) {
        // User selected a specific level - try only that one
        wbdLayers = [hucLevelMap[selectedHucLevel]];
      } else {
        // Fallback to trying all levels (for backwards compatibility)
        wbdLayers = Object.values(hucLevelMap);
      }
      
      let wbdData = null;
      
      for (const layerInfo of wbdLayers) {
        console.log(`Trying WBD layer ${layerInfo.layer} (${layerInfo.name})`);
        
        const wbdUrl = `https://hydro.nationalmap.gov/arcgis/rest/services/wbd/MapServer/${layerInfo.layer}/query`;
        
        // Use point geometry with larger buffer and proper spatial reference
        const buffer = 0.01; // 1km buffer (roughly)
        const bufferGeometry = `${lng - buffer},${lat - buffer},${lng + buffer},${lat + buffer}`;
        
        const wbdParams = new URLSearchParams({
          f: 'geojson',
          geometry: bufferGeometry,
          geometryType: 'esriGeometryEnvelope',
          spatialRel: 'esriSpatialRelIntersects',
          inSR: '4326', // WGS84 spatial reference
          outSR: '4326', // WGS84 output
          outFields: layerInfo.fields,
          returnGeometry: 'true',
          resultRecordCount: 1,
          maxRecordCountFactor: 1
        });
        
        console.log('WBD URL:', `${wbdUrl}?${wbdParams}`);
        
        try {
          const wbdResponse = await fetch(`${wbdUrl}?${wbdParams}`);
          console.log(`WBD Layer ${layerInfo.layer} Response status:`, wbdResponse.status);
          
          if (wbdResponse.ok) {
            const layerData = await wbdResponse.json();
            console.log(`WBD Layer ${layerInfo.layer} Data:`, layerData);
            
            if (layerData.features && layerData.features.length > 0) {
              wbdData = layerData;
              console.log(`Success with ${layerInfo.name}`);
              break; // Found data, stop trying other layers
            } else {
              // Try alternative point-based query if envelope failed
              console.log(`Trying point query for layer ${layerInfo.layer}`);
              const pointParams = new URLSearchParams({
                f: 'geojson',
                geometry: `${lng},${lat}`,
                geometryType: 'esriGeometryPoint',
                spatialRel: 'esriSpatialRelWithin',
                inSR: '4326',
                outSR: '4326',
                outFields: layerInfo.fields,
                returnGeometry: 'true',
                resultRecordCount: 1
              });
              
              const pointResponse = await fetch(`${wbdUrl}?${pointParams}`);
              if (pointResponse.ok) {
                const pointData = await pointResponse.json();
                console.log(`Point query data for layer ${layerInfo.layer}:`, pointData);
                
                if (pointData.features && pointData.features.length > 0) {
                  wbdData = pointData;
                  console.log(`Success with point query on ${layerInfo.name}`);
                  break;
                }
              }
            }
          }
        } catch (layerError) {
          console.warn(`Layer ${layerInfo.layer} failed:`, layerError);
          continue;
        }
      }
      
      if (!wbdData || !wbdData.features || wbdData.features.length === 0) {
        throw new Error('No watershed found at this location');
      }
      
      // Get streams from the National Hydrography Dataset
      const nhdUrl = `https://hydro.nationalmap.gov/arcgis/rest/services/nhd/MapServer/6/query`;
      const streamBuffer = 0.01; // ~1km buffer around the point
      const bufferGeometry = `${lng - streamBuffer},${lat - streamBuffer},${lng + streamBuffer},${lat + streamBuffer}`;
      
      const nhdParams = new URLSearchParams({
        f: 'geojson',
        where: "FType = 460", // Stream/River feature type
        geometry: bufferGeometry,
        geometryType: 'esriGeometryEnvelope',
        spatialRel: 'esriSpatialRelIntersects',
        outFields: 'GNIS_NAME,FType,FCode',
        returnGeometry: 'true'
      });
      
      console.log('NHD URL:', `${nhdUrl}?${nhdParams}`);
      
      const nhdResponse = await fetch(`${nhdUrl}?${nhdParams}`);
      console.log('NHD Response status:', nhdResponse.status);
      
      let streamGeoJson = null;
      if (nhdResponse.ok) {
        streamGeoJson = await nhdResponse.json();
        console.log('Stream GeoJSON:', streamGeoJson);
      }
      
      // Set the watershed and stream data
      setWatershedData(wbdData);
      setStreamData(streamGeoJson);
      setClickedLocation({ lat, lng });
      
      // Success message with dynamic HUC level
      const feature = wbdData.features[0];
      const properties = feature?.properties || {};
      
      // Debug: Log all available properties
      console.log('Available watershed properties:', Object.keys(properties));
      console.log('Full properties object:', properties);
      
      const watershedName = properties?.NAME || properties?.name || 'Unknown';
      
      // Determine which HUC level we got - check for different possible field names
      let hucCode = 'Unknown';
      let hucLevel = 'Unknown';
      
      if (properties.HUC12 || properties.huc12) {
        hucCode = properties.HUC12 || properties.huc12;
        hucLevel = 'HUC12';
      } else if (properties.HUC10 || properties.huc10) {
        hucCode = properties.HUC10 || properties.huc10;
        hucLevel = 'HUC10';
      } else if (properties.HUC8 || properties.huc8) {
        hucCode = properties.HUC8 || properties.huc8;
        hucLevel = 'HUC8';
      }
      
      console.log(`Found watershed: ${watershedName} (${hucLevel}: ${hucCode})`);
      console.log('Selected HUC level was:', selectedHucLevel);
      
      // Add HUC level info to the data for display
      if (wbdData.features[0]) {
        wbdData.features[0].properties.HUC_LEVEL = hucLevel;
        wbdData.features[0].properties.HUC_CODE = hucCode;
        wbdData.features[0].properties.WATERSHED_NAME = watershedName;
      }
      
      // Auto-populate simulation name with watershed name and HUC ID
      // Update if: 1) field is empty, or 2) current name was auto-generated from previous watershed
      if (watershedName && watershedName !== 'Unknown' && (!simulationName.trim() || isSimulationNameAutoGenerated)) {
        let newSimulationName = watershedName;
        if (hucLevel !== 'Unknown' && hucCode !== 'Unknown') {
          newSimulationName = `${watershedName} (${hucLevel}: ${hucCode})`;
        }
        setSimulationName(newSimulationName);
        setIsSimulationNameAutoGenerated(true);
        console.log(`Auto-set simulation name to: ${newSimulationName}`);
      }
      
    } catch (error) {
      console.error('Error fetching watershed data:', error);
      
                      // Try to create a simple placeholder watershed as fallback
        if (error.message.includes('No watershed found') || 
            error.message.includes('WBD API error')) {
          
          console.log('Creating simple watershed fallback for coordinates:', lat, lng);
          const simpleWatershed = createSimpleWatershed(lat, lng);
          setWatershedData(simpleWatershed);
          setStreamData(null);
          setClickedLocation({ lat, lng });
          
          let message = '📍 Showing estimated 2km area for this location.\n\n';
          
          if (error.message.includes('WBD API error')) {
            message += '⚠️ USGS Watershed Boundary service appears to be unavailable.\n';
            message += 'This could be due to:\n';
            message += '• Temporary service outage\n';
            message += '• Network connectivity issues\n';
            message += '• Service maintenance\n\n';
          } else {
            message += '⚠️ No official watershed boundary found at this location.\n';
            message += 'This could be because:\n';
            message += '• Location is outside the US coverage area\n';
            message += '• Point is in a coastal/lake area without defined drainage\n';
            message += '• Very remote location not in the watershed database\n\n';
          }
          
          message += '💡 For official USGS watershed data:\n';
          message += '• Click within the continental United States\n';
          message += '• Avoid coastal edges and large lakes\n';
          message += '• Try locations near visible streams or rivers\n';
          message += '• Works best in mountainous or hilly terrain';
          
          alert(message);
          return;
        }
        
        // More specific error messages for other cases
        let errorMessage = 'Could not fetch watershed data for this location. ';
        
        if (error.message.includes('Failed to fetch')) {
          errorMessage += 'Network connection error. Please check your internet connection and try again.';
        } else if (error.message.includes('WBD API error')) {
          errorMessage += 'The USGS Watershed Boundary service is temporarily unavailable. Please try again later.';
        } else {
          errorMessage += 'This may be outside the US coverage area or there may be a temporary service issue. ';
        }
        
        errorMessage += '\n\nTry clicking on a different location within the United States, preferably in areas with defined drainage patterns.';
        
        alert(errorMessage);
      } finally {
        setIsLoadingWatershed(false);
      }
  };

  // Handle map click
  const handleMapClick = (latlng) => {
    // Clear previous watershed data before fetching new one
    clearWatershedData();
    fetchWatershedData(latlng.lat, latlng.lng);
  };

  // Function to clear watershed data
  const clearWatershedData = () => {
    setWatershedData(null);
    setStreamData(null);
    setClickedLocation(null);
    // Don't auto-update simulation name after clearing watershed
    setIsSimulationNameAutoGenerated(false);
  };

  // Clear watershed data when HUC level changes
  const handleHucLevelChange = (newLevel) => {
    setSelectedHucLevel(newLevel);
    // Clear existing data so user can see the difference
    if (clickedLocation) {
      clearWatershedData();
    }
  };

  // Alternative function for basic watershed estimation (fallback)
  const createSimpleWatershed = (lat, lng) => {
    // Create a simple circular "watershed" as a placeholder
    const radius = 0.02; // approximately 2km radius
    const points = [];
    for (let i = 0; i < 16; i++) {
      const angle = (i * 2 * Math.PI) / 16;
      const latOffset = radius * Math.cos(angle);
      const lngOffset = radius * Math.sin(angle) / Math.cos(lat * Math.PI / 180);
      points.push([lng + lngOffset, lat + latOffset]);
    }
    points.push(points[0]); // Close the polygon
    
    return {
      type: "FeatureCollection",
      features: [{
        type: "Feature",
        properties: { 
          name: "Estimated Watershed (2km radius)",
          isEstimate: true 
        },
        geometry: {
          type: "Polygon",
          coordinates: [points]
        }
      }]
    };
  };
/* 
  // Handle changes to layer parameters
  const handleLayerChange = (e, layerIndex) => {
    const { name, value } = e.target;
    const updatedLayers = [...layers];
    updatedLayers[layerIndex][name] = value;
    setLayers(updatedLayers);
  };

  
  // Handle adding a new layer
  const addLayer = (name) => {
    if (name.trim()) {
      setLayers([
        ...layers,
        {
          name,
          soilType: 'Sandy Loam',
          porosity: '0.45',
          permeability: '1e-12',
          saturation: '0.1',
          vanGenuchtenAlpha: '0.08',
          vanGenuchtenN: '1.6',
        },
      ]);
      setShowLayerModal(false);
    }
  };

  // Remove a layer from the form with confirmation
  const removeLayer = (index) => {
    const isConfirmed = window.confirm("Are you sure you want to delete this layer?");
    if (isConfirmed) {
      const updatedLayers = layers.filter((_, i) => i !== index);
      setLayers(updatedLayers);
    }
  };
 */
  const handleSubmit = async (e) => {
    e.preventDefault();
    const data = new FormData();
    /* layers.forEach((layer,index) => {
        Object.entries(layer).forEach(([key, value])=>{
            data.append(`layer_${index}_${key}`, value);
        });
    }); */
    await fetch('/api/run-ats', {
      method: 'POST',
      body: data,
    });
  };

  const handleSaveModel = async () => {
    if (!user) {
      setSaveMessage('Please log in to save models');
      return;
    }

    if (!geoJsonData) {
      setSaveMessage('Please upload a GeoJSON file first');
      return;
    }

    setIsSaving(true);
    setSaveMessage('');

    try {
      const modelData = {
        name: `ATS - ${simulationName}`,
        model: 'ATS',
        location: 'Custom GeoJSON Area',
        status: 'saved',
        parameters: {
          simulationName,
          simulationStartYear,
          simulationEndYear,
          minPorosity,
          maxPermeability,
          includeRivers,
          useGeologicalLayer
        },
        geoJsonFileName: geoJsonFileName,
        modisLAIFileName: modisLAIFile?.name
      };

      let savedModel;
      
      if (savedData) {
        // Update existing model
        savedModel = userService.updateUserModel(user.id, savedData.id, modelData);
        if (savedModel) {
          setSaveMessage('Model updated successfully!');
        } else {
          setSaveMessage('Failed to update model');
        }
      } else {
        // Create new model
        savedModel = userService.saveUserModel(user.id, modelData);
        if (savedModel) {
          setSaveMessage('Model saved successfully!');
        } else {
          setSaveMessage('Failed to save model');
        }
      }
      
      setTimeout(() => setSaveMessage(''), 3000);
    } catch (error) {
      console.error('Error saving model:', error);
      setSaveMessage('Error saving model');
    } finally {
      setIsSaving(false);
    }
  };

  // Soil types for the dropdown
  // const soilTypes = ['Sandy Loam', 'Clay Loam', 'Silt Loam', 'Loamy Sand', 'Peat'];

  return (
    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} >
      <div className="flex gap-6">
        <div className="w-3/5">
          {/* AOI Inputs */}
          <h2 className="text-xl font-bold text-center mb-6 text-gray-800">Watershed Delineation</h2>

            <div className="mt-6">
               <div className="mb-4 space-y-2">
                 <div className="flex gap-4 items-center justify-between">
                   <div className="text-sm text-gray-600 flex-1">
                     {isLoadingWatershed && `Loading ${hucLevelMap[selectedHucLevel]?.name || 'watershed'} data...`}
                     {clickedLocation && !isLoadingWatershed && watershedData && (
                       <div>
                         <div>Location: {clickedLocation.lat.toFixed(4)}, {clickedLocation.lng.toFixed(4)}</div>
                                                    {watershedData.features?.[0]?.properties && (
                             <div className="text-xs mt-1">
                               {watershedData.features[0].properties.WATERSHED_NAME || watershedData.features[0].properties.NAME || watershedData.features[0].properties.name || 'Watershed'} 
                               {watershedData.features[0].properties.HUC_LEVEL && watershedData.features[0].properties.HUC_CODE && 
                                 ` (${watershedData.features[0].properties.HUC_LEVEL}: ${watershedData.features[0].properties.HUC_CODE})`
                               }
                             </div>
                           )}
                       </div>
                     )}
                     {clickedLocation && !isLoadingWatershed && !watershedData && (
                       <div className="text-amber-600">
                         ⚠️ Click map again to load {hucLevelMap[selectedHucLevel]?.name?.toLowerCase() || 'watershed'} at {clickedLocation.lat.toFixed(4)}, {clickedLocation.lng.toFixed(4)}
                       </div>
                     )}
                     {!clickedLocation && !isLoadingWatershed && "Click on the map to delineate watershed and streams"}
                   </div>
                   
                   {/* Fixed position Clear button */}
                   <div className="w-24">
                     {watershedData && (
                       <Button 
                         onClick={clearWatershedData}
                         className="bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 w-full"
                       >
                         Clear
                       </Button>
                     )}
                   </div>
                   
                   {/* HUC Level Selector - on right side */}
                   <div className="flex items-center gap-3">
                     <Label htmlFor="hucLevel" className="font-semibold text-sm whitespace-nowrap">Watershed Detail Level:</Label>
                     <select
                       id="hucLevel"
                       value={selectedHucLevel}
                       onChange={(e) => handleHucLevelChange(e.target.value)}
                       className="px-3 py-2 border border-gray-300 rounded-md text-sm bg-white"
                     >
                       <option value="12">HUC12 - Subwatershed (~40 km²)</option>
                       <option value="10">HUC10 - Watershed (~400 km²)</option>
                       <option value="8">HUC8 - Subbasin (~1,800 km²)</option>
                     </select>
                   </div>
                 </div>

               </div>
               <MapContainer center={[39.8283, -98.5795]} zoom={4} style={{ height: '500px', width: '100%' }}>
                  <TileLayer
                    url="https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}"
                    attribution='© Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
                  />
                  {geoJsonData && <GeoJSON data={geoJsonData} />}
                  {watershedData && (
                    <GeoJSON 
                      data={watershedData} 
                      style={(feature) => {
                        const isEstimate = feature?.properties?.isEstimate;
                        return {
                          fillColor: isEstimate ? 'orange' : 'blue',
                          fillOpacity: isEstimate ? 0.15 : 0.2,
                          color: isEstimate ? 'orange' : 'blue',
                          weight: 2,
                          dashArray: isEstimate ? '5, 5' : null
                        };
                      }}
                    />
                  )}
                  {streamData && (
                    <GeoJSON 
                      data={streamData}
                      style={{
                        color: 'cyan',
                        weight: 3,
                        opacity: 0.8
                      }}
                    />
                  )}
                  {clickedLocation && (
                    <GeoJSON 
                      data={{
                        type: 'Point',
                        coordinates: [clickedLocation.lng, clickedLocation.lat]
                      }}
                      pointToLayer={(feature, latlng) => {
                        return L.circleMarker(latlng, {
                          radius: 8,
                          fillColor: 'red',
                          color: 'red',
                          weight: 2,
                          opacity: 1,
                          fillOpacity: 0.8
                        });
                      }}
                    />
                  )}
                  <MapController geoJsonData={geoJsonData} />
                  <MapClickHandler onMapClick={handleMapClick} />
                </MapContainer>
                
                {/* Map Legend */}
                {(watershedData || streamData || clickedLocation) && (
                  <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-semibold text-sm mb-2">Map Legend:</h4>
                    <div className="grid grid-cols-2 gap-2 text-xs">
                      {clickedLocation && (
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                          <span>Clicked Point</span>
                        </div>
                      )}
                      {watershedData && (
                        <div className="flex items-center gap-2">
                          {watershedData.features?.[0]?.properties?.isEstimate ? (
                            <div className="w-3 h-3 bg-orange-500 opacity-50 border border-orange-500 border-dashed"></div>
                          ) : (
                            <div className="w-3 h-3 bg-blue-500 opacity-50 border border-blue-500"></div>
                          )}
                          <span>
                            {watershedData.features?.[0]?.properties?.isEstimate 
                              ? "Estimated Area (2km)" 
                              : `Official ${watershedData.features?.[0]?.properties?.HUC_LEVEL || 'Watershed'}`
                            }
                          </span>
                        </div>
                      )}
                      {streamData && (
                        <div className="flex items-center gap-2">
                          <div className="w-8 h-1 bg-cyan-500"></div>
                          <span>Stream Network</span>
                        </div>
                      )}
                      {geoJsonData && (
                        <div className="flex items-center gap-2">
                          <div className="w-3 h-3 bg-green-500 opacity-50 border border-green-500"></div>
                          <span>Uploaded GeoJSON</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
                {!clickedLocation && !isLoadingWatershed && (
                   <div className="space-y-2">
                     <div className="text-xs text-blue-600 bg-blue-50 p-2 rounded">
                       <strong>Watershed Delineation:</strong> Click anywhere in the United States to get official USGS watershed boundaries. 
                       Works best in areas with defined drainage patterns - mountains, hills, and river valleys.
                     </div>
                   </div>
                 )}
                 
                 
            </div>
            
         {/* MODIS LAI Inputs */}
         <div className="grid grid-cols-1 gap-4 mt-6">
              <div>
                <Label htmlFor="modisLAIFile" className="text-xl font-semibold">MODIS LAI File</Label>
                <div className="flex items-center gap-2">
                  <span className="text-blue-600">{modisLAIFile ? modisLAIFile.name : "No file chosen"}</span>
                  <div className="relative ml-auto">
                    <Input
                      name="modisLAIFile"
                      type="file"
                      accept=".nc"
                      onChange={(e) => setMODISLAIFile(e.target.files[0])}
                      required
                      className="absolute inset-0 opacity-0 cursor-pointer"
                    />
                    <Button className="bg-blue-400 text-white py-1 px-3 text-sm rounded">Choose File</Button>
                  </div>
                </div>
              </div>
            </div> 
      </div>
      
      <div className="w-2/5">
       <h2 className="text-xl font-bold text-center mb-6 text-gray-800">Simulation Settings</h2>
        <Card className="mt-18 rounded-2xl shadow-lg p-6">
         <CardContent className="space-y-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Simulation Duration Input */}
          
            <div className="flex items-center gap-4">
              <Label htmlFor="simulationName" className="w-44 font-semibold">Simulation Name</Label>
                              <Input name="simulationName" type="string" value={simulationName} onChange={(e) => {
                  setSimulationName(e.target.value);
                  setIsSimulationNameAutoGenerated(false); // Mark as manually edited
                }} required  className="flex-1"/>
            </div>

            <div className="flex items-center gap-4"> 
              <Label htmlFor="simulationStartYear" className="w-44 font-semibold">Simulation Start Year</Label>
              <Input name="simulationStartYear" type="number" value={simulationStartYear} onChange={(e) => setSimulationStartYear(e.target.value)} required  className="flex-1"/>
            </div>
            
            <div className="flex items-center gap-4"> 
              <Label htmlFor="simulationEndYear" className="w-44 font-semibold">Simulation End Year</Label>
              <Input name="simulationEndYear" type="number" value={simulationEndYear} onChange={(e) => setSimulationEndYear(e.target.value)} required  className="flex-1"/>
            </div>

            <div className="flex items-center gap-4">
              <Label htmlFor="minPorosity" className="w-44 font-semibold">Min Porosity</Label>
              <Input name="minPorosity"  type="number" value={minPorosity} onChange={(e) => setMinPorosity(e.target.value)} step="0.01" min="0" max="1" required className="flex-1"/>
            </div>

            <div className="flex items-center gap-4">
              <Label htmlFor="maxPermeability" className="w-44 font-semibold">Max Permeability</Label>
              <Input name="maxPermeability" type="number" value={maxPermeability} onChange={(e) => setMaxPermeability(e.target.value)} step="1e-10" min="0" required className="flex-1"/>
            </div>

            <div className="flex items-center gap-4">
              <Label htmlFor="includeRivers" className="w-44 font-semibold">Include Rivers in Simulation</Label>
              <select
                id="includeRivers"
                value={includeRivers}
                onChange={(e) => setIncludeRivers(e.target.value === "true")}
                className="flex-1 p-2 rounded border text-sm"
              >
                <option value="true">Yes</option>
                <option value="false">No</option>
              </select>
            </div>

            <div className="flex items-center gap-4">
              <Label htmlFor="useGeologicalLayer" className="w-44 font-semibold">Use Geological Layer?</Label>
              <select
                id="useGeologicalLayer"
                value={useGeologicalLayer}
                onChange={(e) => setUseGeologicalLayer(e.target.value === "true")}
                className="flex-1 p-2 rounded border text-sm"
              >
                <option value="true">Yes</option>
                <option value="false">No</option>
              </select>
            </div>
            

            {/* 
            <h2 className="text-xl font-semibold pt-8">Soil & Hydrological Parameters</h2>   
            {layers.map((layer, index) => (
              <div key={index} className="border-b py-4">
                <h3 className="font-semibold text-lg mb-2">{layer.name}</h3>
                 <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor={`soilType-${index}`}>Soil Type</Label>
                    <select
                      name="soilType"
                      value={layer.soilType}
                      onChange={(e) => handleLayerChange(e, index)}
                      className="w-full p-2 rounded border text-sm"
                    >
                      <option value="" disabled>Select soil type</option>
                      {soilTypes.map((type) => (
                        <option key={type} value={type}>{type}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <Label htmlFor={`porosity-${index}`}>Porosity</Label>
                    <Input
                      name="porosity"
                      type="number"
                      step="0.01"
                      value={layer.porosity}
                      onChange={(e) => handleLayerChange(e, index)}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor={`permeability-${index}`}>Permeability (m²)</Label>
                    <Input
                      name="permeability"
                      type="number"
                      step="1e-18"
                      value={layer.permeability}
                      onChange={(e) => handleLayerChange(e, index)}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor={`saturation-${index}`}>Residual Saturation</Label>
                    <Input
                      name="saturation"
                      type="number"
                      step="0.01"
                      value={layer.saturation}
                      onChange={(e) => handleLayerChange(e, index)}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor={`vanGenuchtenAlpha-${index}`}>van Genuchten Alpha (1/m)</Label>
                    <Input
                      name="vanGenuchtenAlpha"
                      type="number"
                      step="0.01"
                      value={layer.vanGenuchtenAlpha}
                      onChange={(e) => handleLayerChange(e, index)}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor={`vanGenuchtenN-${index}`}>van Genuchten n</Label>
                    <Input
                      name="vanGenuchtenN"
                      type="number"
                      step="0.01"
                      value={layer.vanGenuchtenN}
                      onChange={(e) => handleLayerChange(e, index)}
                      required
                    />
                  </div>
                 </div>
                
                <Button
                    type="button"
                    onClick={() => removeLayer(index)}
                    className="bg-red-500 text-white py-1 px-3 text-sm rounded mt-4"
                >
                    Remove Layer
                </Button>
                </div>
            ))}

            <Button
              type="button"
              onClick={() => setShowLayerModal(true)}
              className="mt-4 bg-blue-500 text-white hover:bg-blue-600 rounded-md"
            >
              Add Another Layer
            </Button>
            <Modal 
                isOpen={showLayerModal} 
                onClose={() => setShowLayerModal(false)} 
                onAddLayer={addLayer}
            />
            */}
            <div className="pt-4 space-y-2">
              <div className="flex gap-4">

                <Button
                  type="button"
                  onClick={handleSaveModel}
                  disabled={isSaving || !geoJsonData}
                  className="flex-1 bg-green-500 hover:bg-green-600 text-white py-2 rounded-md font-semibold"
                >
                  {isSaving ? 'Saving...' : savedData ? 'Update Model Configuration' : 'Save Model Configuration'}
                </Button>
                
                <Button 
                  type="submit" 
                  className="flex-1 bg-blue-500 text-white hover:bg-blue-600 rounded-md p-2 disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={!geoJsonData}
                >
                  Generate Inputs for ATS
                </Button>
                
              </div>
              
              {saveMessage && (
                <div className={`text-center p-3 rounded-lg text-sm ${
                  saveMessage.includes('successfully') 
                    ? 'bg-green-100 text-green-700' 
                    : 'bg-red-100 text-red-700'
                }`}>
                  {saveMessage}
                </div>
              )}
            </div>
          </form>
        </CardContent>
      </Card>
      </div>
    </div>
    </motion.div>
  );
}
